<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
  http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
  http://www.springframework.org/schema/aop   
  http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
  http://www.springframework.org/schema/context  
  http://www.springframework.org/schema/context/spring-context-4.0.xsd
  http://www.springframework.org/schema/tx 
  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	<!-- 加载资源文件 其中包含变量信息 -->  
    <context:property-placeholder location="classpath:/jdbc.properties" ignore-unresolvable="true" />

	<!-- <bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>/i18n/message</value>
			</list>
		</property>
		<property name="cacheSeconds" value="5" />
	</bean> -->

	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
		<property name="resultSetLogEnabled" value="true" />
	</bean>

	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!--maxActive: 最大连接数量 -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!--minIdle: 最小空闲连接 -->
		<property name="minIdle" value="${jdbc.minIdle}" />
		<!--maxIdle: 最大空闲连接 -->
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<!--initialSize: 初始化连接 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!-- 连接被泄露时是否打印 -->
		<property name="logAbandoned" value="${jdbc.logAbandoned}" />
		<!--removeAbandoned: 是否自动回收超时连接 -->
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<!--removeAbandonedTimeout: 超时时间(以秒数为单位) -->
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
		<!--maxWait: 超时等待时间以毫秒为单位 1000等于1秒 -->
		<property name="maxWait" value="2000" />
		<!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
		<property name="numTestsPerEvictionRun" value="${jdbc.numTestsPerEvictionRun}" />
		<!-- 1000 * 60 * 30 连接在池中保持空闲而不被空闲连接回收器线程 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />
		<property name="validationQuery" value="${jdbc.validationQuery}" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 事务控制 -->
	<!-- <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy> -->

	<!-- tx声明事务管理使用：使用声明式事务管理的方法就是添加下边的配置内容，在dao类和service类中tx会自动拦截进行事务管理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- <tx:method name="add*" propagation="REQUIRED" rollback-for="org.walker.common.exception.ApplicationException"/> -->
			<tx:method name="add*" propagation="REQUIRED" rollback-for="" />
			<tx:method name="create*" propagation="REQUIRED"
				rollback-for="" />
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="" />
			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="" />
			<tx:method name="delete*" propagation="REQUIRED"
				rollback-for="" />
			<tx:method name="remove*" propagation="REQUIRED"
				rollback-for="" />

			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="select*" propagation="SUPPORTS" />
			<tx:method name="query*" propagation="SUPPORTS" />

		</tx:attributes>
	</tx:advice>

	<aop:config>
		<!--把事务控制在Service和Dao层 -->
		<!-- <aop:pointcut id="txPointcut" expression="(execution(* org.walker.*.dao.*.*(..)) 
			or execution(* org.walker.*.service.*.*(..)))" /> <aop:advisor pointcut="execution(* 
			org.walker.*.dao.*.*(..))" advice-ref="txAdvice" /> <aop:advisor id="txPointcut" 
			pointcut="execution(* org.walker.*.service.*.*(..))" advice-ref="txAdvice" 
			/> -->
		<aop:pointcut id="txPointcut"
			expression="(execution(* org.walker.*.service.*.*(..)))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
</beans>
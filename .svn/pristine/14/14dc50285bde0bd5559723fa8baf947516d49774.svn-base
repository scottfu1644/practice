/**
 * Copy right.
 * 
 * Project Name: randstad-system <br>
 * Date: 2017年4月9日 下午6:59:28 <br/>
 * Function: TODO(suzu) ADD FUNCTION. <br>
 * History : 1. [2017-04-09] Create by suzu
 */
package com.randstad.system.controllers;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.DisabledAccountException;
import org.apache.shiro.authc.ExcessiveAttemptsException;
import org.apache.shiro.authc.ExpiredCredentialsException;
import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.LockedAccountException;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.authz.UnauthorizedException;
import org.apache.shiro.subject.Subject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map;

import com.randstad.common.ws.MsgDto;

/**
 * Function: 登录API. <br>
 * 
 * @author suzu
 */
@RestController
// @RequestMapping("/user")
public class LoginController {
  private static Logger logger = LoggerFactory.getLogger(LoginController.class);

  /**
   * 实际的登录代码 如果登录成功，跳转至首页；登录失败，则将失败信息反馈对用户
   * 
   * @param params 登录参数
   * @return 登录执行结果信息
   */
  @RequestMapping(value = "/login", method = RequestMethod.POST)
  @ResponseBody
  public MsgDto<Object> doLogin(@RequestBody Map<String, Object> params) {
    logger.info("doLogin");
    String msg = "";
    String username = (String) params.get("username"); // request.getParameter("userName");
    String password = (String) params.get("password"); // request.getParameter("password");
    System.out.println(username);
    System.out.println(password);
    UsernamePasswordToken token = new UsernamePasswordToken(username, password);
    token.setRememberMe(true);
    Subject subject = SecurityUtils.getSubject();
    MsgDto<Object> msgDto = new MsgDto<>();
    try {
      subject.login(token);
      if (subject.isAuthenticated()) {
        msgDto.setStatus(MsgDto.STATUS_SUCCESS);
        msgDto.setMessage("登录成功");
      } else {
        msgDto.setStatus(MsgDto.STATUS_FAILURE);
        msgDto.setMessage("登录失败");
      }
    } catch (IncorrectCredentialsException e) {
      msg = "登录密码错误. Password for account " + token.getPrincipal() + " was incorrect.";
      msgDto.setStatus(MsgDto.STATUS_FAILURE);
      msgDto.setMessage(msg);
      System.out.println(msg);
    } catch (ExcessiveAttemptsException e) {
      msg = "登录失败次数过多";
      msgDto.setStatus(MsgDto.STATUS_FAILURE);
      msgDto.setMessage(msg);
    } catch (LockedAccountException e) {
      msg = "帐号已被锁定. The account for username " + token.getPrincipal() + " was locked.";
      msgDto.setStatus(MsgDto.STATUS_FAILURE);
      msgDto.setMessage(msg);
    } catch (DisabledAccountException e) {
      msg = "帐号已被禁用. The account for username " + token.getPrincipal() + " was disabled.";
      msgDto.setStatus(MsgDto.STATUS_FAILURE);
      msgDto.setMessage(msg);
    } catch (ExpiredCredentialsException e) {
      msg = "帐号已过期. the account for username " + token.getPrincipal() + "  was expired.";
      msgDto.setStatus(MsgDto.STATUS_FAILURE);
      msgDto.setMessage(msg);
    } catch (UnknownAccountException e) {
      msg = "帐号不存在. There is no user with username of " + token.getPrincipal();
      msgDto.setStatus(MsgDto.STATUS_FAILURE);
      msgDto.setMessage(msg);
    } catch (UnauthorizedException e) {
      msg = "您没有得到相应的授权！" + e.getMessage();
      msgDto.setStatus(MsgDto.STATUS_FAILURE);
      msgDto.setMessage(msg);
    }

    logger.info("doLogin : " + msgDto);

    return msgDto;
  }
}
